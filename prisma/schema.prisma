// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String  @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String
  customerId   String? @unique

  createdAt DateTime @default(now())

  journals Journal[]
  verses Verse[]

  Subscription Subscription?
}

model Journal {
  id          String   @id @default(uuid())
  title       String
  body        String     // Storing Tiptap content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tagId       String?
  tag         Tag?      @relation(fields: [tagId], references: [id])
  entryType   String?

  @@index([userId]) // For optimizing queries related to users
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  journals    Journal[]
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Verse {
  id          String   @id @default(uuid())
  verseId        String   @unique
  chapterId      String
  bookId         String
  isBookmarked   Boolean?
  highlightColor String?
  verseContent String?
  notes Note[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? 
}

model Note {
  id          String   @id @default(uuid())
  content String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Verse   Verse?   @relation(fields: [verseModelId], references: [id])
  verseModelId String?
}